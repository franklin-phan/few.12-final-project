{"version":3,"sources":["components/Title.js","components/Item.js","components/Counter.js","components/ItemList.js","components/PantryForm.js","components/ItemDetails.js","components/footer.js","components/App.js","serviceWorker.js","index.js"],"names":["Title","className","activeClassName","exact","to","Item","props","name","image","tags","id","src","process","width","height","alt","Counter","state","count","this","setState","onClick","e","addOne","minusOne","React","Component","ItemList","spaces","data","map","i","images","nutrition","key","PantryForm","value","handleChange","bind","handleSubmit","event","target","alert","preventDefault","ItemDetails","match","params","energy","protein","fat","saturatedfat","carbohydrate","sugars","dietaryfiber","sodium","potassium","transfat","polyunsaturatedfat","monounsaturatedfat","vitamine","vitaminb3","magnesium","Footer","year","App","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.543dd6da.chunk.js","sourcesContent":["// src/Title.js\n\nimport React from 'react'\nimport './Title.css';\nimport { NavLink } from 'react-router-dom'\n\nfunction Title() {\n    return (\n      <div className=\"Title\">\n        <header>\n          <h1>Virtual Pantry</h1>\n          <div className=\"Title-Subtitle\">Track Your Food Online</div>\n  \n          <div>\n          <NavLink\n            className=\"nav-link\"\n            activeClassName=\"nav-link-active\"\n            exact\n            to=\"/\">Home</NavLink>\n          <NavLink\n            className=\"nav-link\"\n            activeClassName=\"nav-link-active\"\n            to=\"/form\">About</NavLink>\n          {/* <NavLink\n            className=\"nav-link\"\n            activeClassName=\"nav-link-active\"\n            to=\"/about\">Login</NavLink>            \n          \n          <NavLink\n            className=\"nav-link\"\n            activeClassName=\"nav-link-active\"\n            to=\"/about\">Sign Up</NavLink>       */}\n          </div>\n\n\n  \n        </header>\n      </div>\n    )\n  }\n\nexport default Title","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction Item(props) {\n    const { name, image, tags,id } = props\n    return (\n      <div>\n        <Link to={`/details/${id}`}>\n            <img src={`${process.env.PUBLIC_URL}/images/${image}`} width=\"300\" height=\"300\" alt=\"Food\" />\n        </Link>\n        <h1>\n            <Link to={`/details/${id}`}>\n                {name}\n            </Link>\n        </h1>\n        <div>{tags}</div>\n      </div>\n    )\n  }\nexport default Item","import React from 'react'\n\nclass Counter extends React.Component{ \n    constructor(props) {\n      super(props)\n      this.state = {count:0}\n    }\n    addOne() {\n        this.setState({count: this.state.count + 1})\n    }\n    minusOne() {\n        this.setState({count: this.state.count - 1})\n      }\n    \n    render() {\n      return (\n  \n        <div className=\"Counter\">\n           <h1> Inventory: { this.state.count }</h1>\n\n           <button onClick={(e) => {\n                this.addOne()\n            }}>+1</button>\n             <button onClick={(e) => {\n                this.minusOne()\n            }}>-1</button>\n          \n          \n        </div>\n      );\n    }\n  }\n  \n  export default Counter;\n  ","import React from 'react';\nimport Item from './Item';\nimport './ItemList.css';\nimport data from './food.json'\nimport Counter from './Counter'\nfunction ItemList() {\n\n    const spaces = data.map(( { name, tags, images,nutrition }, i) => {\n\n        return (\n          <div className=\"Item\">\n          <Item\n            id = {i}\n            key={name}\n            name={name}\n            image={images[0]}\n            tags={tags}\n          />\n          <Counter />\n          </div>\n\n        )\n        \n      })\n      \n\n  return (\n    <div className=\"ItemList\">\n      { spaces }\n    </div>\n  )\n}\n\nexport default ItemList","import React from 'react'\n\nclass PantryForm extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {value: ''};\n  \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleChange(event) {\n      this.setState({value: event.target.value});\n    }\n  \n    handleSubmit(event) {\n      alert('A name was submitted: ' + this.state.value);\n      event.preventDefault();\n    }\n  \n    render() {\n      return (\n        <div>\n      <h1>About the Virtual Pantry</h1>\n      <p>Track your pantry's inventory with this app!</p>\n    </div>\n      );\n    }\n  }\n  \n  export default PantryForm","import React from 'react'\n\nimport data from './food.json'\nimport './ItemDetails.css'\nfunction ItemDetails(props) {\n  const { id } = props.match.params // Location index\n  const { images, name, tags,energy,protein,fat,saturatedfat,carbohydrate,sugars,dietaryfiber,sodium,potassium,transfat,polyunsaturatedfat,monounsaturatedfat,vitamine,vitaminb3,magnesium} = data[id]\n\n  return (\n    <div>\n      <div>\n        <img src={`${process.env.PUBLIC_URL}/images/${images[0]}`} />\n      </div>\n\n      <div>\n        <h1>{ name }</h1>\n        <p>{ tags }</p>\n        <div className=\"Nutrition\">\n          <h1>Nutrition Per 100 Grams</h1>\n        {(() => {\n            if (energy) {\n            return (\n                <p>Energy: { energy }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n        {(() => {\n            if (protein) {\n            return (\n                <p>Protein: { protein }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n        {(() => {\n            if (fat) {\n            return (\n                <p>Fat: { fat }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n        {(() => {\n            if (saturatedfat) {\n            return (\n                <p>Saturated Fat: { saturatedfat }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n        {(() => {\n            if (carbohydrate) {\n            return (\n                <p>Carbohydates: { carbohydrate }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n        {(() => {\n            if (energy) {\n            return (\n                <p>Sugars: { sugars }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n        {(() => {\n            if (dietaryfiber) {\n            return (\n                <p>Dietary Fiber: { dietaryfiber }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n        {(() => {\n            if (sodium) {\n            return (\n                <p>Sodium: { sodium }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n        {(() => {\n            if (potassium) {\n            return (\n                <p>Potassium: { potassium }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n        {(() => {\n            if (transfat) {\n            return (\n                <p>Trans Fat: { transfat }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n        {(() => {\n            if (polyunsaturatedfat) {\n            return (\n                <p>Polyunsaturated Fat: { polyunsaturatedfat }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n        {(() => {\n            if (monounsaturatedfat) {\n            return (\n                <p>Energy: { monounsaturatedfat }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n        {(() => {\n            if (vitamine) {\n            return (\n                <p>Vitamin E: { vitamine }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n        {(() => {\n            if (vitaminb3) {\n            return (\n                <p>Vitamin B3: { vitaminb3 }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n        {(() => {\n            if (magnesium) {\n            return (\n                <p>Magnesium: { magnesium }</p>\n            )\n        \n            } else {\n            return;\n            }\n        })()}\n         </div>\n      </div>\n\n    </div>\n  )\n}\n\nexport default ItemDetails","import React from 'react'\nimport './Footer.css'\nfunction Footer(props) {\n    const { name, year } = props\n    return (\n      <div>\n        <h1>{name} {year}</h1>\n      </div>\n    )\n  }\nexport default Footer","\nimport React from 'react';\nimport './App.css';\nimport Title from './Title';\nimport ItemList from './ItemList'\nimport { HashRouter as Router, Route } from 'react-router-dom'\nimport PantryForm from './PantryForm'\nimport ItemDetails from './ItemDetails'\nimport Footer from './footer'\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <Title />\n      <Route exact path=\"/\" component={ItemList}/>\n      <Route path=\"/form\" component={PantryForm} />\n      <Route path=\"/details/:id\" component={ItemDetails} />\n      <Footer name=\"Franklin Phan\" year=\"2020\"/>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}